// <auto-generated />
using System;
using Kulinarna.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Kulinarna.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180706100254_ratings")]
    partial class ratings
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Kulinarna.Data.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new { Id = 1, Name = "płatki śniadaniowe" },
                        new { Id = 2, Name = "mleko" },
                        new { Id = 3, Name = "chleb biały" },
                        new { Id = 4, Name = "masło" },
                        new { Id = 5, Name = "woda" },
                        new { Id = 6, Name = "lód" },
                        new { Id = 7, Name = "czarna herbata" },
                        new { Id = 8, Name = "cukier" },
                        new { Id = 9, Name = "zupka chińska" },
                        new { Id = 10, Name = "kawa rozpuszczalna" },
                        new { Id = 11, Name = "smalec" },
                        new { Id = 12, Name = "konserwa turystyczna" },
                        new { Id = 13, Name = "kaszanka" },
                        new { Id = 14, Name = "parówka" },
                        new { Id = 15, Name = "sól" }
                    );
                });

            modelBuilder.Entity("Kulinarna.Data.Models.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<float>("DifficultyRating");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("NumberOfDifficultyRatings");

                    b.Property<int>("NumberOfQualityRatings");

                    b.Property<float>("QualityRating");

                    b.Property<int?>("TimeToMake");

                    b.HasKey("Id");

                    b.ToTable("Recipes");

                    b.HasData(
                        new { Id = 1, Description = "Płatki wsypać do miski i zalać mlekiem.", DifficultyRating = 0f, Name = "Płatki z mlekiem", NumberOfDifficultyRatings = 0, NumberOfQualityRatings = 0, QualityRating = 0f, TimeToMake = 2 },
                        new { Id = 2, Description = "Wsypać lód do szklanki i zalać wodą.", DifficultyRating = 0f, Name = "Woda z lodem", NumberOfDifficultyRatings = 0, NumberOfQualityRatings = 0, QualityRating = 0f, TimeToMake = 1 },
                        new { Id = 3, Description = "Pokroić chleb w kromki i posmarować je masłem.", DifficultyRating = 0f, Name = "Chleb z masłem", NumberOfDifficultyRatings = 0, NumberOfQualityRatings = 0, QualityRating = 0f, TimeToMake = 3 },
                        new { Id = 4, Description = "Herbatę zaparzyć zgodnie z instrukcją na opakowaniu, posłodzić", DifficultyRating = 0f, Name = "Herbata czarna z cukrem", NumberOfDifficultyRatings = 0, NumberOfQualityRatings = 0, QualityRating = 0f, TimeToMake = 5 },
                        new { Id = 5, Description = "Zawartość opakowania wsypać do miski i zalać wrzącą wodą. Przykryć i odczekać 5 min.", DifficultyRating = 0f, Name = "Zupka chińska", NumberOfDifficultyRatings = 0, NumberOfQualityRatings = 0, QualityRating = 0f, TimeToMake = 7 },
                        new { Id = 6, Description = "Kawę zalać wrzącą wodą, dodać mleko i cukier", DifficultyRating = 0f, Name = "Kawa rozpuszczalna z mlekiem i cukrem", NumberOfDifficultyRatings = 0, NumberOfQualityRatings = 0, QualityRating = 0f, TimeToMake = 5 },
                        new { Id = 7, Description = "Rozgrzać smalec na patelni, wrzucić kaszankę i konserwę turystyczną. Oddać psu.", DifficultyRating = 0f, Name = "Konserwa z kaszanką", NumberOfDifficultyRatings = 0, NumberOfQualityRatings = 0, QualityRating = 0f, TimeToMake = 10 },
                        new { Id = 8, Description = "Parówki zalać wrzątkiem. Przykryć i odczekać 5 min. Doprawić solą.", DifficultyRating = 0f, Name = "Zupa parówkowa", NumberOfDifficultyRatings = 0, NumberOfQualityRatings = 0, QualityRating = 0f, TimeToMake = 8 }
                    );
                });

            modelBuilder.Entity("Kulinarna.Data.Models.RecipeIngredient", b =>
                {
                    b.Property<int>("RecipeId");

                    b.Property<int>("IngredientId");

                    b.Property<decimal>("Amount");

                    b.Property<int>("AmountUnit");

                    b.HasKey("RecipeId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("RecipesIngredients");

                    b.HasData(
                        new { RecipeId = 1, IngredientId = 1, Amount = 60m, AmountUnit = 0 },
                        new { RecipeId = 1, IngredientId = 2, Amount = 1m, AmountUnit = 2 },
                        new { RecipeId = 2, IngredientId = 5, Amount = 1m, AmountUnit = 2 },
                        new { RecipeId = 2, IngredientId = 6, Amount = 20m, AmountUnit = 0 },
                        new { RecipeId = 3, IngredientId = 3, Amount = 100m, AmountUnit = 0 },
                        new { RecipeId = 3, IngredientId = 4, Amount = 30m, AmountUnit = 0 },
                        new { RecipeId = 4, IngredientId = 5, Amount = 1m, AmountUnit = 2 },
                        new { RecipeId = 4, IngredientId = 7, Amount = 1m, AmountUnit = 3 },
                        new { RecipeId = 4, IngredientId = 8, Amount = 1m, AmountUnit = 3 },
                        new { RecipeId = 5, IngredientId = 5, Amount = 400m, AmountUnit = 1 },
                        new { RecipeId = 5, IngredientId = 9, Amount = 1m, AmountUnit = 5 },
                        new { RecipeId = 6, IngredientId = 5, Amount = 1m, AmountUnit = 2 },
                        new { RecipeId = 6, IngredientId = 10, Amount = 10m, AmountUnit = 0 },
                        new { RecipeId = 6, IngredientId = 2, Amount = 20m, AmountUnit = 1 },
                        new { RecipeId = 6, IngredientId = 8, Amount = 1m, AmountUnit = 4 },
                        new { RecipeId = 7, IngredientId = 11, Amount = 1m, AmountUnit = 4 },
                        new { RecipeId = 7, IngredientId = 12, Amount = 200m, AmountUnit = 0 },
                        new { RecipeId = 7, IngredientId = 13, Amount = 2m, AmountUnit = 5 },
                        new { RecipeId = 8, IngredientId = 5, Amount = 500m, AmountUnit = 1 },
                        new { RecipeId = 8, IngredientId = 14, Amount = 3m, AmountUnit = 5 },
                        new { RecipeId = 8, IngredientId = 15, Amount = 5m, AmountUnit = 0 }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Kulinarna.Data.Models.RecipeIngredient", b =>
                {
                    b.HasOne("Kulinarna.Data.Models.Ingredient", "Ingredient")
                        .WithMany("IngredientRecipes")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Kulinarna.Data.Models.Recipe", "Recipe")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
